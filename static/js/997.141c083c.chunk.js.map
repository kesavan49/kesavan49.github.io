{"version":3,"file":"static/js/997.141c083c.chunk.js","mappings":"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","sources":["webpack://ansterra-static/./src/components/input/input.module.scss?d7b5","components/input/input.tsx","container/form-control/form-control.tsx","pages/signup/signup.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"input_inputContainer__ZvCmS\",\"input\":\"input_input__EBh3D\",\"passImg\":\"input_passImg__FkCLp\"};","import React, { useEffect, useState } from \"react\";\nimport { hidePassword, viewPassword } from \"../../assets/images\";\n\nimport style from \"./input.module.scss\";\n\nconst Input = (props: any) => {\n  const { type = \"text\", disabled = false } = props;\n  const [password, togglePassword] = useState(false);\n  const [ctype, setType] = useState(type);\n\n  useEffect(() => {\n    if(type === 'password'){\n      setType(password ? 'text' : 'password');\n    }\n  }, [password, type]);\n\n  return (\n    <div className={style.inputContainer}>\n      <input type={ctype} className={style.input} disabled={disabled} />\n      {type === \"password\" ? (\n        <img className={style.passImg} src={password ? hidePassword : viewPassword} alt=\"password\" onClick={() => togglePassword(!password)} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Input;\n","const FromControl = ({\n  label,\n  input,\n  renderLabel,\n}: {\n  label: string | JSX.Element;\n  input: JSX.Element;\n  renderLabel?: () => JSX.Element;\n}) => {\n  return (\n    <div className=\"form-control\">\n      {renderLabel ? (\n        renderLabel()\n      ) : (\n        <label className=\"form-label\">{label}</label>\n      )}\n      {input}\n    </div>\n  );\n};\n\nexport default FromControl;\n","import React, { Fragment, useCallback, useState } from \"react\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Bag, Logo, Megaphone, SignupBG, Spark } from \"../../assets/images\";\nimport { Button, Header } from \"../../components\";\nimport Input from \"../../components/input/input\";\nimport FromControl from \"../../container/form-control/form-control\";\nimport \"./signup.scss\";\n\nconst SignUp = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(0);\n\n  const getForm = useCallback(() => {\n    switch (step) {\n      case 0:\n        return (\n          <Fragment>\n            <FromControl label=\"First name\" input={<Input />} />\n            <FromControl\n              label={\n                <div className=\"form-label\">\n                  Middle name <span className=\"helper-txt\">(optional)</span>\n                </div>\n              }\n              input={<Input />}\n            />\n            <FromControl label=\"Last name\" input={<Input />} />\n            <FromControl\n              label=\"\"\n              input={<Input />}\n              renderLabel={() => (\n                <div className=\"d-flex\">\n                  <label className=\"form-label\">Profile name</label>\n                  <span className=\"info\">\n                    {\" \"}\n                    <img src={Spark} alt=\"spark\" /> Unique across Testroom\n                  </span>\n                </div>\n              )}\n            />\n          </Fragment>\n        );\n      case 1:\n        return (\n          <Fragment>\n            <FromControl label=\"Country\" input={<Input />} />\n            <FromControl label=\"State\" input={<Input disabled />} />\n            <FromControl label=\"Current School Year\" input={<Input />} />\n          </Fragment>\n        );\n\n      case 2:\n        return (\n          <Fragment>\n            <FromControl label=\"Mobile\" input={<Input />} />\n            <FromControl label=\"Email ID\" input={<Input disabled />} />\n            <FromControl label=\"Set Passowrd\" input={<Input type=\"password\" />} />\n            <FromControl\n              label={\"\"}\n              input={\n                <div className=\"center\">\n                  <ReCAPTCHA sitekey=\"6LcjZfYlAAAAAECFC3eKbH6n7FcYqn8uabhWf_Hr\" />\n                </div>\n              }\n            />\n          </Fragment>\n        );\n    }\n  }, [step]);\n\n  const updateStep = useCallback(() => {\n    if (step < 2) {\n      setStep(step + 1);\n    } else {\n      navigate(\"/signin\");\n    }\n  }, [navigate, step]);\n\n  return (\n    <div className=\"signup-container\">\n      <div className=\"left\">\n        <Header></Header>\n        <div className=\"center p-3 d-flex d-col\">\n          <h2>Welcome to testroom registration</h2>\n          <div className=\"left-content\">\n            {getForm()}\n            <div className=\"form-control txt-right\">\n              <Button onClick={updateStep}>Next</Button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"right\">\n        <div className=\"d-flex signin\" onClick={() => navigate(\"/signin\")}>\n          Sign in\n        </div>\n        <div className=\"offer\">\n          <div>\n            <img className=\"icon\" src={Megaphone} alt=\"Mega phone\" />\n          </div>\n          <div>\n            <ul>\n              <li>\n                Receive 40% off when you sign up now and pay for a package{\" \"}\n              </li>\n              <li>Choose more, pay less!</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"right-content full\">\n          <div className=\"bag\">\n            <img src={Bag} alt=\"description\" />\n          </div>\n          <div className=\"steps\">\n            <img src={SignupBG} alt=\"description\" className=\"signup\" />\n            <img src={Logo} alt=\"Ansterra\" className=\"logo\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["props","_props$type","type","_props$disabled","disabled","_useState","useState","_useState2","_slicedToArray","password","togglePassword","_useState3","_useState4","ctype","setType","useEffect","_jsxs","className","style","children","_jsx","src","hidePassword","viewPassword","alt","onClick","_ref","label","input","renderLabel","navigate","useNavigate","step","setStep","getForm","useCallback","Fragment","FromControl","Input","Spark","ReCAPTCHA","sitekey","updateStep","Header","Button","Megaphone","Bag","SignupBG","Logo"],"sourceRoot":""}